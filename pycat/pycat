#!/usr/bin/env python

import argparse

parser = argparse.ArgumentParser(description="print some files to stdout")
parser.add_argument("--version", action="version", version="%(prog)s 0.1.0")
parser.add_argument("files", nargs="+", help="files to cat")
parser.add_argument(
    "--number",
    "-n",
    action="store_const",
    const=True,
    default=False,
    help="print line numbers",
)
parser.add_argument(
    "--show-ends",
    "-E",
    action="store_const",
    const=True,
    default=False,
    help="display $ at end of each line",
)
parser.add_argument(
    "--number-nonblank",
    "-b",
    action="store_const",
    const=True,
    default=False,
    help="number nonempty output lines",
)
parser.add_argument(
    "--squeeze-blank",
    "-s",
    action="store_const",
    const=True,
    default=False,
    help="suppress repeated empty output lines",
)
parser.add_argument("--show-tabs", "-T",
    action="store_const",
    const=True,
    default=False,
    help="display TAB characters as ^I",
)

args = parser.parse_args()
files = args.files
print_line_numbers = args.number
show_ends = args.show_ends
number_nonblank_lines_only = args.number_nonblank
squeeze_blank_lines = args.squeeze_blank
show_tabs = args.show_tabs


def add_line_numbers(content, number_nonblank_lines_only=False):
    count = 0
    updated_content = []

    # TODO (mg): use list-comprehension
    for line in content:
        stripped_line = line.strip("\n")

        # if line is empty (newline counts as 1 character) and empty lines should not be numbered
        if len(line) == 1 and number_nonblank_lines_only:
            updated_content.append(stripped_line)
        else:
            count += 1
            updated_content.append(f"{count : >6} {stripped_line}")

    return updated_content


def print_lines(content):
    for line in content:
        print(line.strip("\n"))


def print_ends(content):
    updated_content = []

    for line in content:
        line = line.strip("\n") + "$"
        updated_content.append(line)

    return updated_content


def squeeze_down_blank_lines(content):
    updated_content = []
    last_line_blank = False

    for line in content:
        if len(line) <= 1 and last_line_blank == True:
            # if the last line was blank and this line is blank,
            # skip it because we're squeezing down to one blank line.

            pass
        elif len(line) <= 1 and last_line_blank == False:
            # if the last line wasn't blank and this one is,
            # append it as normal and set last_line_blank to True

            last_line_blank = True
            line = line.strip("\n")
            updated_content.append(line)
        else:
            line = line.strip("\n")
            updated_content.append(line)
            last_line_blank = False

    return updated_content

def replace_tabs(content):
    updated_content = []
    for line in content:
        if "\t" in line:
            line = line.replace("\t", "^I")
            updated_content.append(line)
        else:
            updated_content.append(line)

    return updated_content

if __name__ == "__main__":
    for file in files:
        with open(file, "r") as f:
            if squeeze_blank_lines:
                f = squeeze_down_blank_lines(f)
            if show_tabs:
                f = replace_tabs(f)

            if print_line_numbers or number_nonblank_lines_only:
                f = add_line_numbers(f, number_nonblank_lines_only)

            if show_ends:
                f = print_ends(f)
            print_lines(f)
